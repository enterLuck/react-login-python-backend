{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/workspace/RLPB/react-login-python-backend/client/src/index.js\";\n/* \n    The index.js is the initial page for the app\n    it determines the layout restrictions based on \n    screen size by identifying the height and width\n*/\n\n/* Import react third-party files */\nimport React from 'react';\n\n/* Import react third-party DOM files */\nimport { createRoot } from 'react-dom/client';\n\n/* Import react inhouse files */\nimport App from './App';\nimport './index.css';\n\n// Function to detect the type of device\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction detectDevice() {\n  // Check for touch support\n  var isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints;\n\n  // Check screen size\n  var screenWidth = window.innerWidth;\n  var isMobile = screenWidth < 600;\n  var isTablet = screenWidth >= 600 && screenWidth <= 1024;\n  var isDesktop = screenWidth > 1024;\n\n  // Check user agent for additional clues\n  var isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n  var isAndroid = navigator.userAgent.match(/Android/i);\n\n  // Log the detected device type\n  if (isTouchDevice) {\n    if (isiOS) {\n      console.log(\"This is an iOS touch device (likely iPhone or iPad).\");\n    } else if (isAndroid) {\n      console.log(\"This is an Android touch device.\");\n    } else {\n      console.log(\"This is a touch device.\");\n    }\n  } else {\n    if (isMobile) {\n      console.log(\"This is a mobile device.\");\n    } else if (isTablet) {\n      console.log(\"This is a tablet device.\");\n    } else if (isDesktop) {\n      console.log(\"This is a desktop or laptop device.\");\n    } else {\n      console.log(\"Unable to determine device type.\");\n    }\n  }\n}\n\n// Call the function to detect the device\ndetectDevice();\n\n// Execute wrappers and App\ncreateRoot(document.getElementById('root')).render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 60,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","createRoot","App","jsxDEV","_jsxDEV","detectDevice","isTouchDevice","window","navigator","maxTouchPoints","screenWidth","innerWidth","isMobile","isTablet","isDesktop","isiOS","test","userAgent","MSStream","isAndroid","match","console","log","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/workspace/RLPB/react-login-python-backend/client/src/index.js"],"sourcesContent":["/* \n    The index.js is the initial page for the app\n    it determines the layout restrictions based on \n    screen size by identifying the height and width\n*/\n\n/* Import react third-party files */\nimport React from 'react';\n\n/* Import react third-party DOM files */\nimport { createRoot } from 'react-dom/client';\n\n/* Import react inhouse files */\nimport App from './App';\n\nimport './index.css'\n\n// Function to detect the type of device\nfunction detectDevice() {\n  // Check for touch support\n  var isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints;\n\n  // Check screen size\n  var screenWidth = window.innerWidth;\n  var isMobile = screenWidth < 600;\n  var isTablet = screenWidth >= 600 && screenWidth <= 1024;\n  var isDesktop = screenWidth > 1024;\n\n  // Check user agent for additional clues\n  var isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n  var isAndroid = navigator.userAgent.match(/Android/i);\n\n  // Log the detected device type\n  if (isTouchDevice) {\n      if (isiOS) {\n          console.log(\"This is an iOS touch device (likely iPhone or iPad).\");\n      } else if (isAndroid) {\n          console.log(\"This is an Android touch device.\");\n      } else {\n          console.log(\"This is a touch device.\");\n      }\n  } else {\n      if (isMobile) {\n          console.log(\"This is a mobile device.\");\n      } else if (isTablet) {\n          console.log(\"This is a tablet device.\");\n      } else if (isDesktop) {\n          console.log(\"This is a desktop or laptop device.\");\n      } else {\n          console.log(\"Unable to determine device type.\");\n      }\n  }\n}\n\n// Call the function to detect the device\ndetectDevice();\n\n// Execute wrappers and App\ncreateRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA,OAAOC,GAAG,MAAM,OAAO;AAEvB,OAAO,aAAa;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB;EACA,IAAIC,aAAa,GAAG,cAAc,IAAIC,MAAM,IAAIC,SAAS,CAACC,cAAc;;EAExE;EACA,IAAIC,WAAW,GAAGH,MAAM,CAACI,UAAU;EACnC,IAAIC,QAAQ,GAAGF,WAAW,GAAG,GAAG;EAChC,IAAIG,QAAQ,GAAGH,WAAW,IAAI,GAAG,IAAIA,WAAW,IAAI,IAAI;EACxD,IAAII,SAAS,GAAGJ,WAAW,GAAG,IAAI;;EAElC;EACA,IAAIK,KAAK,GAAG,kBAAkB,CAACC,IAAI,CAACR,SAAS,CAACS,SAAS,CAAC,IAAI,CAACV,MAAM,CAACW,QAAQ;EAC5E,IAAIC,SAAS,GAAGX,SAAS,CAACS,SAAS,CAACG,KAAK,CAAC,UAAU,CAAC;;EAErD;EACA,IAAId,aAAa,EAAE;IACf,IAAIS,KAAK,EAAE;MACPM,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACvE,CAAC,MAAM,IAAIH,SAAS,EAAE;MAClBE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACnD,CAAC,MAAM;MACHD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAC1C;EACJ,CAAC,MAAM;IACH,IAAIV,QAAQ,EAAE;MACVS,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAC3C,CAAC,MAAM,IAAIT,QAAQ,EAAE;MACjBQ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAC3C,CAAC,MAAM,IAAIR,SAAS,EAAE;MAClBO,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACtD,CAAC,MAAM;MACHD,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACnD;EACJ;AACF;;AAEA;AACAjB,YAAY,CAAC,CAAC;;AAEd;AACAJ,UAAU,CAACsB,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CAACC,MAAM,eAChDrB,OAAA,CAACJ,KAAK,CAAC0B,UAAU;EAAAC,QAAA,eACfvB,OAAA,CAACF,GAAG;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}